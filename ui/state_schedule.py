# Auto-generated by tools/modularize_ui.py
import pygame, pygame_gui
from typing import Optional, List, Dict, Tuple

# Core & Engine imports (keep broad to avoid missing names during split)
try:
    from core.save_system import Career, save_career, load_career, simulate_week_ai
except Exception:
    pass
try:
    from engine import Team, Fighter, Weapon, TBCombat, Event, layout_teams_tiles
except Exception:
    try:
        from engine.model import Team, Fighter, Weapon
        from engine.tbcombat import TBCombat, Event
        from engine.grid import layout_teams_tiles
    except Exception:
        pass


class ScheduleState:
    def __init__(self, app):
        self.app = app; self.ui = pygame_gui.UIManager(app.screen.get_size()); self._build_ui()

    def _build_ui(self):
        w,h = self.app.screen.get_size()
        self.lbl = pygame_gui.elements.UILabel(pygame.Rect(16,16,w-32,32), "Schedule", self.ui)
        self.btn_back = pygame_gui.elements.UIButton(pygame.Rect(w-16-120,16,120,32),"Back", self.ui)
        self.box = pygame_gui.elements.UITextBox(
            self._html_schedule(),
            pygame.Rect(16,64,w-32,h-80),
            manager=self.ui
        )

    def _html_schedule(self):
        try:
            html = []
            wk = self.app.career.week
            html.append(f"<b>Week {wk+1}</b><br>")
            for fx in self.app.career.weeks[wk]:
                a = self.app.career.get_team(fx["home"])["name"]
                b = self.app.career.get_team(fx["away"])["name"]
                res = fx.get("result","vs")
                html.append(f"{a} â€” {b} : {res}")
            return "<br>".join(html)
        except Exception:
            return "No schedule."

    def handle(self, event):
        if event.type == pygame.VIDEORESIZE:
            self.ui.set_window_resolution(event.size); self._build_ui()
        pressed = (event.type == pygame.USEREVENT and getattr(event, "user_type", None) == pygame_gui.UI_BUTTON_PRESSED) \
                  or (event.type == pygame_gui.UI_BUTTON_PRESSED)
        if pressed and event.ui_element == self.btn_back:
            self.app.set_state(ManagerMenuState(self.app))
        self.ui.process_events(event)

    def update(self, dt): self.ui.update(dt)
    def draw(self, surf): surf.fill(DARK); self.ui.draw_ui(surf)
