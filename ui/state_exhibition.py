# Auto-generated by tools/modularize_ui.py
import pygame, pygame_gui
from typing import Optional, List, Dict, Tuple

# Core & Engine imports (keep broad to avoid missing names during split)
try:
    from core.save_system import Career, save_career, load_career, simulate_week_ai
except Exception:
    pass
try:
    from engine import Team, Fighter, Weapon, TBCombat, Event, layout_teams_tiles
except Exception:
    try:
        from engine.model import Team, Fighter, Weapon
        from engine.tbcombat import TBCombat, Event
        from engine.grid import layout_teams_tiles
    except Exception:
        pass


class ExhibitionSelectState:
    """Pick two teams for a quick exhibition match."""
    def __init__(self, app):
        self.app = app
        self.ui = pygame_gui.UIManager(app.screen.get_size())
        self._label_to_tid = {}
        self._selA = None
        self._selB = None
        self._build_ui()

    def _labels(self):
        labs = []
        self._label_to_tid.clear()
        for t in self.app.career.teams:
            lab = f"{t['name']} (Avg OVR {team_average_ovr(t)})"
            self._label_to_tid[lab] = t["tid"]; labs.append(lab)
        return labs

    def _build_ui(self):
        w,h = self.app.screen.get_size(); pad = 12
        self.lbl = pygame_gui.elements.UILabel(pygame.Rect(pad,pad,w-2*pad,32),"Exhibition â€” Pick Two Teams", self.ui)
        lw = (w - 3*pad)//2
        self.listA = pygame_gui.elements.UISelectionList(pygame.Rect(pad, 48, lw, h-48-64), self._labels(), self.ui)
        self.listB = pygame_gui.elements.UISelectionList(pygame.Rect(2*pad+lw, 48, lw, h-48-64), self._labels(), self.ui)
        self.btn_back = pygame_gui.elements.UIButton(pygame.Rect(w - pad - 160, h - 48, 160, 36), "Back", self.ui)
        self.btn_go   = pygame_gui.elements.UIButton(pygame.Rect(w - pad - 160*2 - 8, h - 48, 160, 36), "Start Match", self.ui)

    def handle(self, event):
        if event.type == pygame.VIDEORESIZE:
            self.ui.set_window_resolution(event.size); self._build_ui()

        newsel = (event.type == pygame.USEREVENT and getattr(event, "user_type", None) == pygame_gui.UI_SELECTION_LIST_NEW_SELECTION) \
                 or (event.type == pygame_gui.UI_SELECTION_LIST_NEW_SELECTION)
        pressed = (event.type == pygame.USEREVENT and getattr(event, "user_type", None) == pygame_gui.UI_BUTTON_PRESSED) \
                  or (event.type == pygame_gui.UI_BUTTON_PRESSED)

        if newsel and event.ui_element in (self.listA, self.listB):
            lab = event.text; tid = self._label_to_tid.get(lab)
            if event.ui_element == self.listA: self._selA = tid
            else: self._selB = tid

        if pressed:
            if event.ui_element == self.btn_back:
                self.app.set_state(MenuState(self.app))
            elif event.ui_element == self.btn_go:
                if self._selA is not None and self._selB is not None and self._selA != self._selB:
                    self.app.exhibition_pair = (self._selA, self._selB)
                    self.app.set_state(MatchState(self.app, scheduled=False))

        self.ui.process_events(event)

    def update(self, dt): self.ui.update(dt)
    def draw(self, surf): surf.fill(DARK); self.ui.draw_ui(surf)
