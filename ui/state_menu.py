# Auto-generated by tools/modularize_ui.py
import pygame, pygame_gui
from typing import Optional, List, Dict, Tuple

# Core & Engine imports (keep broad to avoid missing names during split)
try:
    from core.save_system import Career, save_career, load_career, simulate_week_ai
except Exception:
    pass
try:
    from engine import Team, Fighter, Weapon, TBCombat, Event, layout_teams_tiles
except Exception:
    try:
        from engine.model import Team, Fighter, Weapon
        from engine.tbcombat import TBCombat, Event
        from engine.grid import layout_teams_tiles
    except Exception:
        pass


class MenuState:
    """Main Menu: New Game, Load Game, Play Match (exhibition), Settings, Quit"""

    def __init__(self, app):
        self.app = app
        self.ui = pygame_gui.UIManager(app.screen.get_size())
        self._build_ui()

    def _build_ui(self):
        w, h = self.app.screen.get_size()
        cx = w//2
        pad = 12
        btnw, btnh = 300, 48
        y = h//2 - (btnh*5 + pad*4)//2

        self.title = pygame_gui.elements.UILabel(
            pygame.Rect(cx-320, 64, 640, 48),
            "D20 Fight Club â€” Manager", self.ui
        )

        self.btn_new  = pygame_gui.elements.UIButton(pygame.Rect(cx-btnw//2, y, btnw, btnh), "New Game", self.ui); y+=btnh+pad
        self.btn_load = pygame_gui.elements.UIButton(pygame.Rect(cx-btnw//2, y, btnw, btnh), "Load Game", self.ui); y+=btnh+pad
        self.btn_play = pygame_gui.elements.UIButton(pygame.Rect(cx-btnw//2, y, btnw, btnh), "Play Match (Exhibition)", self.ui); y+=btnh+pad
        self.btn_set  = pygame_gui.elements.UIButton(pygame.Rect(cx-btnw//2, y, btnw, btnh), "Settings", self.ui); y+=btnh+pad
        self.btn_quit = pygame_gui.elements.UIButton(pygame.Rect(cx-btnw//2, y, btnw, btnh), "Quit", self.ui)

    def handle(self, event):
        if event.type == pygame.VIDEORESIZE:
            self.ui.set_window_resolution(event.size); self._build_ui()

        pressed = (event.type == pygame.USEREVENT and getattr(event, "user_type", None) == pygame_gui.UI_BUTTON_PRESSED) \
                  or (event.type == pygame_gui.UI_BUTTON_PRESSED)
        if pressed:
            if event.ui_element == self.btn_new:
                car = make_default_career()
                if car is None:
                    pygame_gui.windows.UIMessageWindow(
                        pygame.Rect(200, 200, 440, 220),
                        "Could not create a default league.\n"
                        "Please update core/save_system.py to expose a league factory.",
                        self.ui
                    )
                else:
                    self.app.career = car
                    self.app.set_state(TeamSelectState(self.app))

            elif event.ui_element == self.btn_load:
                path = os.path.join(SAVES_DIR, "career.json")
                car = load_career(path)
                if car:
                    self.app.career = car
                    if self.app.chosen_tid:
                        self.app.set_state(ManagerMenuState(self.app))
                    else:
                        self.app.set_state(TeamSelectState(self.app))
                else:
                    pygame_gui.windows.UIMessageWindow(
                        pygame.Rect(200, 200, 360, 200),
                        "No save found at saves/career.json",
                        self.ui
                    )

            elif event.ui_element == self.btn_play:
                if not self.app.career:
                    car = make_default_career()
                    if not car:
                        pygame_gui.windows.UIMessageWindow(
                            pygame.Rect(200, 200, 360, 200),
                            "No league available.", self.ui
                        )
                        return
                    self.app.career = car
                self.app.exhibition_pair = None
                self.app.set_state(ExhibitionSelectState(self.app))

            elif event.ui_element == self.btn_set:
                self.app.set_state(SettingsState(self.app))

            elif event.ui_element == self.btn_quit:
                self.app.running = False

        self.ui.process_events(event)

    def update(self, dt):
        self.ui.update(dt)

    def draw(self, surf):
        surf.fill(DARK); self.ui.draw_ui(surf)
