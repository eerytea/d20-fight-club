# Auto-generated by tools/modularize_ui.py
import pygame, pygame_gui
from typing import Optional, List, Dict, Tuple

# Core & Engine imports (keep broad to avoid missing names during split)
try:
    from core.save_system import Career, save_career, load_career, simulate_week_ai
except Exception:
    pass
try:
    from engine import Team, Fighter, Weapon, TBCombat, Event, layout_teams_tiles
except Exception:
    try:
        from engine.model import Team, Fighter, Weapon
        from engine.tbcombat import TBCombat, Event
        from engine.grid import layout_teams_tiles
    except Exception:
        pass


class TeamSelectState:
    """Two-pane: left teams with Avg OVR; right roster + fighter details; Manage/Back buttons."""
    def __init__(self, app):
        self.app = app
        self.ui = pygame_gui.UIManager(app.screen.get_size())
        self.selected_tid = None
        self._label_to_tid = {}
        self._current_team = None
        self._current_fighter = None
        self._build_ui()

    def _team_labels(self):
        labels = []
        self._label_to_tid.clear()
        for t in self.app.career.teams:
            avg = team_average_ovr(t)
            label = f"{t['name']} (Avg OVR {avg})"
            self._label_to_tid[label] = t["tid"]
            labels.append(label)
        return labels

    def _build_ui(self):
        w,h = self.app.screen.get_size()
        pad = 12
        left_w = int(w*0.38)
        right_x = pad*2 + left_w
        right_w = w - right_x - pad

        self.lbl_title = pygame_gui.elements.UILabel(pygame.Rect(pad,pad,w-2*pad,32),"Select Your Team",self.ui)

        self.list_teams = pygame_gui.elements.UISelectionList(
            pygame.Rect(pad, 48, left_w, h - 48 - pad),
            self._team_labels(), manager=self.ui
        )

        top_h = int((h - 48 - pad)*0.55)
        self.list_roster = pygame_gui.elements.UISelectionList(
            pygame.Rect(right_x, 48, right_w, top_h), [], manager=self.ui
        )
        # UITextBox(html_text, rect, manager=...)
        self.box_details = pygame_gui.elements.UITextBox(
            "<b>Fighter Details</b><br>Select a fighter to view.",
            pygame.Rect(right_x, 48+top_h+pad, right_w, h - (48+top_h+2*pad)),
            manager=self.ui
        )

        btn_w, btn_h = 160, 36
        self.btn_manage = pygame_gui.elements.UIButton(pygame.Rect(w - pad - btn_w*2 - 8, pad, btn_w, btn_h),"Manage Team", self.ui)
        self.btn_back   = pygame_gui.elements.UIButton(pygame.Rect(w - pad - btn_w, pad, btn_w, btn_h),"Back", self.ui)

    def _populate_roster(self, team):
        items = []
        for f in team.get("fighters", []):
            items.append(f"{f.get('name','?')} — OVR {int(f.get('ovr',0))}")
        if hasattr(self.list_roster, "set_item_list"):
            self.list_roster.set_item_list(items)

    def _render_fighter_details(self, f: Dict):
        keys = ("class","level","age","ovr","peak_ovr","hp","ac","speed","str","dex","con","int","wis","cha","dev_trait")
        rows = [f"<b>{f.get('name','?')}</b>"]
        for k in keys:
            if k in f: rows.append(f"{k.upper()}: {f[k]}")
        self.box_details.set_text("<br>".join(rows))

    def handle(self, event):
        if event.type == pygame.VIDEORESIZE:
            self.ui.set_window_resolution(event.size); self._build_ui(); return

        newsel = (event.type == pygame.USEREVENT and getattr(event, "user_type", None) == pygame_gui.UI_SELECTION_LIST_NEW_SELECTION) \
                 or (event.type == pygame_gui.UI_SELECTION_LIST_NEW_SELECTION)
        pressed = (event.type == pygame.USEREVENT and getattr(event, "user_type", None) == pygame_gui.UI_BUTTON_PRESSED) \
                  or (event.type == pygame_gui.UI_BUTTON_PRESSED)

        if newsel:
            if event.ui_element == self.list_teams:
                label = event.text
                tid = self._label_to_tid.get(label)
                if tid is not None:
                    for t in self.app.career.teams:
                        if t["tid"] == tid:
                            self._current_team = t
                            self.selected_tid = tid
                            self._populate_roster(t)
                            self._current_fighter = None
                            self.box_details.set_text("<b>Fighter Details</b><br>Select a fighter to view.")
                            break
            elif event.ui_element == self.list_roster and self._current_team:
                label = event.text
                name = label.split(" — ", 1)[0]
                for f in self._current_team.get("fighters", []):
                    if f.get("name") == name:
                        self._current_fighter = f
                        self._render_fighter_details(f)
                        break

        if pressed:
            if event.ui_element == self.btn_back:
                self.app.set_state(MenuState(self.app))
            elif event.ui_element == self.btn_manage:
                if self.selected_tid is not None:
                    self.app.chosen_tid = self.selected_tid
                    self.app.set_state(ManagerMenuState(self.app))

        self.ui.process_events(event)

    def update(self, dt): self.ui.update(dt)
    def draw(self, surf): surf.fill(DARK); self.ui.draw_ui(surf)
