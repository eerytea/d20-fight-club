# Auto-generated by tools/modularize_ui.py
import pygame, pygame_gui
from typing import Optional, List, Dict, Tuple

# Core & Engine imports (keep broad to avoid missing names during split)
try:
    from core.save_system import Career, save_career, load_career, simulate_week_ai
except Exception:
    pass
try:
    from engine import Team, Fighter, Weapon, TBCombat, Event, layout_teams_tiles
except Exception:
    try:
        from engine.model import Team, Fighter, Weapon
        from engine.tbcombat import TBCombat, Event
        from engine.grid import layout_teams_tiles
    except Exception:
        pass


class ManagerMenuState:
    """Post-selection main management menu."""
    def __init__(self, app):
        self.app = app
        self.ui = pygame_gui.UIManager(app.screen.get_size())
        self._build_ui()

    def _build_ui(self):
        w, h = self.app.screen.get_size()
        pad = 12; btnw, btnh = 220, 44
        y = 120
        self.title = pygame_gui.elements.UILabel(pygame.Rect(16,16,w-32,40),"Manager Menu", self.ui)
        self.btn_play  = pygame_gui.elements.UIButton(pygame.Rect(16,y,btnw,btnh),"Play Match", self.ui); y+=btnh+pad
        self.btn_adv   = pygame_gui.elements.UIButton(pygame.Rect(16,y,btnw,btnh),"Advance Week", self.ui); y+=btnh+pad
        self.btn_ros   = pygame_gui.elements.UIButton(pygame.Rect(16,y,btnw,btnh),"Roster", self.ui); y+=btnh+pad
        self.btn_sched = pygame_gui.elements.UIButton(pygame.Rect(16,y,btnw,btnh),"Schedule", self.ui); y+=btnh+pad
        self.btn_table = pygame_gui.elements.UIButton(pygame.Rect(16,y,btnw,btnh),"Table", self.ui); y+=btnh+pad
        self.btn_save  = pygame_gui.elements.UIButton(pygame.Rect(16,y,btnw,btnh),"Save Game", self.ui); y+=btnh+pad
        self.btn_menu  = pygame_gui.elements.UIButton(pygame.Rect(16,y,btnw,btnh),"Main Menu", self.ui); y+=btnh+pad
        self.btn_quit  = pygame_gui.elements.UIButton(pygame.Rect(16,y,btnw,btnh),"Quit", self.ui)

    def handle(self, event):
        if event.type == pygame.VIDEORESIZE:
            self.ui.set_window_resolution(event.size); self._build_ui()

        pressed = (event.type == pygame.USEREVENT and getattr(event, "user_type", None) == pygame_gui.UI_BUTTON_PRESSED) \
                  or (event.type == pygame_gui.UI_BUTTON_PRESSED)

        if pressed:
            if event.ui_element == self.btn_play:
                self.app.scheduled_fixture = True
                self.app.set_state(MatchState(self.app, scheduled=True))
            elif event.ui_element == self.btn_adv:
                simulate_week_ai(self.app.career)   # quick-sim AI + update table
                ensure_dir(SAVES_DIR); save_career(os.path.join(SAVES_DIR, "career.json"), self.app.career)
            elif event.ui_element == self.btn_ros:
                self.app.set_state(RosterState(self.app))
            elif event.ui_element == self.btn_sched:
                self.app.set_state(ScheduleState(self.app))
            elif event.ui_element == self.btn_table:
                self.app.set_state(TableState(self.app))
            elif event.ui_element == self.btn_save:
                ensure_dir(SAVES_DIR); save_career(os.path.join(SAVES_DIR,"career.json"), self.app.career)
            elif event.ui_element == self.btn_menu:
                self.app.set_state(MenuState(self.app))
            elif event.ui_element == self.btn_quit:
                self.app.running = False

        self.ui.process_events(event)

    def update(self, dt): self.ui.update(dt)

    def draw(self, surf):
        surf.fill(DARK); self.ui.draw_ui(surf)
        # header info
        try:
            font = pygame.font.SysFont(None, 28)
            t = self.app.career.get_team(self.app.chosen_tid)
            avg = team_average_ovr(t)
            info = f"Week {self.app.career.week+1} / {self.app.career.total_weeks} â€” {t['name']}   |   Avg OVR {avg}"
            surf.blit(font.render(info, True, WHITE), (260, 24))
        except Exception:
            pass
