# Auto-generated by tools/modularize_ui.py
import pygame
from typing import Optional, Tuple
try:
    from core.save_system import Career
except Exception:
    Career = object

# Default entry state
try:
    from .state_menu import MenuState
except Exception:
    MenuState = None


class App:
    def __init__(self):
        ensure_dir(SAVES_DIR)
        self.settings = load_json(SETTINGS_PATH, DEFAULT_SETTINGS.copy())
        pygame.init()
        try: pygame.mixer.init()
        except Exception: pass

        self.apply_resolution(tuple(self.settings.get("resolution",[1280,720])))
        pygame.display.set_caption("D20 Fight Club â€” Manager")
        try: pygame.mixer.music.set_volume(float(self.settings.get("volume_master",0.8)))
        except Exception: pass

        self.clock = pygame.time.Clock()
        self.running = True

        # game state (career will be created on "New Game")
        self.career: Optional[Career] = None
        self.current_save_path: Optional[str] = None
        self.chosen_tid: Optional[int] = None
        self.exhibition_pair: Optional[Tuple[int,int]] = None
        self.scheduled_fixture: Optional[bool] = None

        self.state = MenuState(self)

    def apply_resolution(self, res_xy):
        flags = pygame.RESIZABLE | pygame.SCALED
        try:
            self.screen = pygame.display.set_mode(res_xy, flags)
        except Exception:
            self.screen = pygame.display.set_mode(res_xy, pygame.RESIZABLE)

    def set_state(self, state):
        self.state = state

    def run(self):
        try:
            while self.running:
                dt = self.clock.tick(FPS) / 1000.0
                for event in pygame.event.get():
                    if event.type == pygame.QUIT:
                        self.running = False
                    else:
                        self.state.handle(event)
                self.state.update(dt)
                self.state.draw(self.screen)
                pygame.display.flip()
        except Exception:
            import traceback, datetime
            with open("crash.log", "a", encoding="utf-8") as f:
                f.write(f"\n=== {datetime.datetime.now()} ===\n")
                f.write("".join(traceback.format_exc()))
            raise
        finally:
            pygame.quit()
