# Auto-generated by tools/modularize_ui.py
import pygame, pygame_gui
from typing import Optional, List, Dict, Tuple

# Core & Engine imports (keep broad to avoid missing names during split)
try:
    from core.save_system import Career, save_career, load_career, simulate_week_ai
except Exception:
    pass
try:
    from engine import Team, Fighter, Weapon, TBCombat, Event, layout_teams_tiles
except Exception:
    try:
        from engine.model import Team, Fighter, Weapon
        from engine.tbcombat import TBCombat, Event
        from engine.grid import layout_teams_tiles
    except Exception:
        pass


class RosterState:
    """Simple roster list + details; small toolbar."""
    PAGE_SIZE = 12

    def __init__(self, app):
        self.app = app
        self.manager = pygame_gui.UIManager(app.screen.get_size())
        self._fighters = []
        self._page = 0
        self._desc = True
        self._build_ui()
        self._load_fighters()

    def _calc_boxes(self, w, h):
        left = pygame.Rect(16, 64, 360, h - 64 - 16)
        right = pygame.Rect(16+360+12, 64, w - (16+360+12) - 16, h - 64 - 16)
        return left, right

    def _build_ui(self):
        w,h = self.app.screen.get_size()
        self.lbl = pygame_gui.elements.UILabel(pygame.Rect(16, 16, w-32, 32), "Roster", self.manager)

        list_rect, card_rect = self._calc_boxes(w, h)
        self.list_fighters = pygame_gui.elements.UISelectionList(list_rect, [], self.manager)
        self.card_box = pygame_gui.elements.UITextBox(
            "<b>Select a fighter</b>",
            card_rect,
            manager=self.manager
        )

        # toolbar
        self.dd_sort = pygame_gui.elements.UIDropDownMenu(
            ["OVR","AGE","LEVEL","CLASS","NAME"], "OVR",
            pygame.Rect(16, h-48, 120, 32), self.manager
        )
        self.btn_dir  = pygame_gui.elements.UIButton(pygame.Rect(144, h-48, 120, 32), "Descending", self.manager)
        self.btn_prev = pygame_gui.elements.UIButton(pygame.Rect(270, h-48, 80, 32), "Prev", self.manager)
        self.btn_next = pygame_gui.elements.UIButton(pygame.Rect(355, h-48, 80, 32), "Next", self.manager)
        self.btn_compare = pygame_gui.elements.UIButton(pygame.Rect(440, h-48, 120, 32), "Compare", self.manager)
        self.btn_back = pygame_gui.elements.UIButton(pygame.Rect(w-16-140, 16, 140, 32), "Back", self.manager)

    def _load_fighters(self):
        t = self.app.career.get_team(self.app.chosen_tid)
        self._fighters = list(t.get("fighters", []))
        self._apply_sort_and_page()

    def _apply_sort_and_page(self):
        key = self.dd_sort.selected_option
        rev = self._desc
        def sort_key(f):
            if key == "OVR": return int(f.get("ovr",0))
            if key == "AGE": return int(f.get("age",0))
            if key == "LEVEL": return int(f.get("level",1))
            if key == "CLASS": return str(f.get("class",""))
            if key == "NAME": return str(f.get("name",""))
            return 0
        s = sorted(self._fighters, key=sort_key, reverse=rev)
        # page
        start = self._page * self.PAGE_SIZE
        chunk = s[start:start+self.PAGE_SIZE]
        items = [f"{f.get('name','?')} — OVR {int(f.get('ovr',0))}" for f in chunk]
        if hasattr(self.list_fighters, "set_item_list"):
            self.list_fighters.set_item_list(items)

    def _update_card_from_selection(self):
        if not self.list_fighters.item_list: return
        sel = self.list_fighters.get_single_selection()
        if not sel: return
        name = sel.split(" — ",1)[0]
        for f in self._fighters:
            if f.get("name")==name:
                info = []
                for k in ("class","level","age","ovr","peak_ovr","hp","ac","speed","str","dex","con","int","wis","cha","dev_trait"):
                    if k in f: info.append(f"{k.upper()}: {f[k]}")
                self.card_box.set_text(f"<b>{f.get('name','?')}</b><br>" + "<br>".join(info))
                return

    def _compare_popup(self):
        pygame_gui.windows.UIMessageWindow(pygame.Rect(200,200,360,200),"Compare coming soon", self.manager)

    def handle(self, event):
        if event.type == pygame.VIDEORESIZE:
            self.manager.set_window_resolution(event.size)
            w, h = event.size
            list_rect, card_rect = self._calc_boxes(w, h)
            self.list_fighters.set_relative_rect(list_rect)
            self.card_box.set_relative_rect(card_rect)
            # reposition toolbar
            self.dd_sort.set_relative_rect(pygame.Rect(16, h-48, 120, 32))
            self.btn_dir.set_relative_rect(pygame.Rect(144, h-48, 120, 32))
            self.btn_prev.set_relative_rect(pygame.Rect(270, h-48, 80, 32))
            self.btn_next.set_relative_rect(pygame.Rect(355, h-48, 80, 32))
            self.btn_compare.set_relative_rect(pygame.Rect(440, h-48, 120, 32))
            self.btn_back.set_relative_rect(pygame.Rect(w-16-140, 16, 140, 32))

        pressed = (event.type == pygame.USEREVENT and getattr(event, "user_type", None) == pygame_gui.UI_BUTTON_PRESSED) \
                  or (event.type == pygame_gui.UI_BUTTON_PRESSED)
        changed = (event.type == pygame.USEREVENT and getattr(event, "user_type", None) == pygame_gui.UI_DROP_DOWN_MENU_CHANGED) \
                  or (event.type == pygame_gui.UI_DROP_DOWN_MENU_CHANGED)
        newsel = (event.type == pygame.USEREVENT and getattr(event, "user_type", None) == pygame_gui.UI_SELECTION_LIST_NEW_SELECTION) \
                 or (event.type == pygame_gui.UI_SELECTION_LIST_NEW_SELECTION)

        if pressed:
            if event.ui_element == self.btn_back:
                self.app.set_state(ManagerMenuState(self.app))
            elif event.ui_element == self.btn_prev:
                if self._page > 0: self._page -= 1; self._apply_sort_and_page()
            elif event.ui_element == self.btn_next:
                total = max(1, (len(self._fighters)+self.PAGE_SIZE-1)//self.PAGE_SIZE)
                if self._page < total-1: self._page += 1; self._apply_sort_and_page()
            elif event.ui_element == self.btn_dir:
                self._desc = not self._desc; self.btn_dir.set_text("Descending" if self._desc else "Ascending")
                self._apply_sort_and_page()
            elif event.ui_element == self.btn_compare:
                self._compare_popup()

        if changed and event.ui_element == self.dd_sort:
            self._page = 0; self._apply_sort_and_page()

        if newsel and event.ui_element == self.list_fighters:
            self._update_card_from_selection()

        self.manager.process_events(event)

    def update(self, dt): self.manager.update(dt)
    def draw(self, surf): surf.fill(DARK); self.manager.draw_ui(surf)
