# Auto-generated by tools/modularize_ui.py
import pygame, pygame_gui
from typing import Optional, List, Dict, Tuple

# Core & Engine imports (keep broad to avoid missing names during split)
try:
    from core.save_system import Career, save_career, load_career, simulate_week_ai
except Exception:
    pass
try:
    from engine import Team, Fighter, Weapon, TBCombat, Event, layout_teams_tiles
except Exception:
    try:
        from engine.model import Team, Fighter, Weapon
        from engine.tbcombat import TBCombat, Event
        from engine.grid import layout_teams_tiles
    except Exception:
        pass


class SettingsState:
    """Simple settings: resolution + master volume."""
    RES_CHOICES = ["1280x720","1600x900","1920x1080"]

    def __init__(self, app):
        self.app = app
        self.ui = pygame_gui.UIManager(app.screen.get_size())
        self._build_ui()

    def _build_ui(self):
        w, h = self.app.screen.get_size()
        pad = 12
        self.lbl = pygame_gui.elements.UILabel(pygame.Rect(16,16,w-32,32),"Settings", self.ui)

        self.dd_res = pygame_gui.elements.UIDropDownMenu(
            options_list=self.RES_CHOICES, starting_option=f"{self.app.settings['resolution'][0]}x{self.app.settings['resolution'][1]}",
            relative_rect=pygame.Rect(16,64,240,36), manager=self.ui
        )
        self.slider = pygame_gui.elements.UIHorizontalSlider(
            relative_rect=pygame.Rect(16, 120, 240, 24),
            start_value=float(self.app.settings.get("volume_master",0.8)), value_range=(0.0,1.0), manager=self.ui
        )
        self.lbl_vol = pygame_gui.elements.UILabel(pygame.Rect(270, 116, 160, 32), f"Volume: {int(self.slider.get_current_value()*100)}%", self.ui)

        self.btn_back = pygame_gui.elements.UIButton(pygame.Rect(w-16-160,16,160,36),"Back", self.ui)

    def handle(self, event):
        if event.type == pygame.VIDEORESIZE:
            self.ui.set_window_resolution(event.size); self._build_ui()

        changed = (event.type == pygame.USEREVENT and getattr(event, "user_type", None) == pygame_gui.UI_DROP_DOWN_MENU_CHANGED) \
                  or (event.type == pygame_gui.UI_DROP_DOWN_MENU_CHANGED)
        moved   = (event.type == pygame.USEREVENT and getattr(event, "user_type", None) == pygame_gui.UI_HORIZONTAL_SLIDER_MOVED) \
                  or (event.type == pygame_gui.UI_HORIZONTAL_SLIDER_MOVED)
        pressed = (event.type == pygame.USEREVENT and getattr(event, "user_type", None) == pygame_gui.UI_BUTTON_PRESSED) \
                  or (event.type == pygame_gui.UI_BUTTON_PRESSED)

        if changed and event.ui_element == self.dd_res:
            try:
                sx, sy = [int(x) for x in event.text.split("x")]
                self.app.apply_resolution((sx, sy))
                self.app.settings["resolution"] = [sx, sy]
                save_json(SETTINGS_PATH, self.app.settings)
            except Exception:
                pass

        if moved and event.ui_element == self.slider:
            v = float(self.slider.get_current_value())
            self.lbl_vol.set_text(f"Volume: {int(v*100)}%")
            self.app.settings["volume_master"] = v
            try: pygame.mixer.music.set_volume(v)
            except Exception: pass
            save_json(SETTINGS_PATH, self.app.settings)

        if pressed and event.ui_element == self.btn_back:
            self.app.set_state(MenuState(self.app))

        self.ui.process_events(event)

    def update(self, dt): self.ui.update(dt)
    def draw(self, surf): surf.fill(DARK); self.ui.draw_ui(surf)
