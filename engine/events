# engine/events.py
from __future__ import annotations
from dataclasses import dataclass
from typing import Union, Tuple, Optional


@dataclass
class StartRound:
    round_no: int


@dataclass
class Move:
    pid: str
    from_xy: Tuple[int, int]
    to_xy: Tuple[int, int]


@dataclass
class Hit:
    attacker: str
    defender: str
    dmg: int
    new_hp: int


@dataclass
class Miss:
    attacker: str
    defender: str


@dataclass
class Down:
    attacker: Optional[str]  # can be None if downed by environment
    defender: str


@dataclass
class End:
    winner: str  # 'home' or 'away' or 'draw'


Event = Union[StartRound, Move, Hit, Miss, Down, End]


def format_event(ev: Event) -> str:
    if isinstance(ev, StartRound):
        return f"— Round {ev.round_no} —"
    if isinstance(ev, Move):
        return f"{ev.pid} moves {ev.from_xy} → {ev.to_xy}"
    if isinstance(ev, Hit):
        return f"{ev.attacker} hits {ev.defender} for {ev.dmg} (HP {ev.new_hp})"
    if isinstance(ev, Miss):
        return f"{ev.attacker} misses {ev.defender}"
    if isinstance(ev, Down):
        if ev.attacker:
            return f"{ev.attacker} downs {ev.defender}!"
        return f"{ev.defender} is down!"
    if isinstance(ev, End):
        w = {"home": "Home", "away": "Away", "draw": "Draw"}.get(ev.winner, ev.winner)
        return f"Match ends — {w}"
    return str(ev)
